# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import xr_pb2 as xr__pb2


class gRPCConfigOperStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfig = channel.unary_stream(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetConfig',
                request_serializer=xr__pb2.ConfigGetArgs.SerializeToString,
                response_deserializer=xr__pb2.ConfigGetReply.FromString,
                )
        self.MergeConfig = channel.unary_unary(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig',
                request_serializer=xr__pb2.ConfigArgs.SerializeToString,
                response_deserializer=xr__pb2.ConfigReply.FromString,
                )
        self.DeleteConfig = channel.unary_unary(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig',
                request_serializer=xr__pb2.ConfigArgs.SerializeToString,
                response_deserializer=xr__pb2.ConfigReply.FromString,
                )
        self.ReplaceConfig = channel.unary_unary(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig',
                request_serializer=xr__pb2.ConfigArgs.SerializeToString,
                response_deserializer=xr__pb2.ConfigReply.FromString,
                )
        self.CliConfig = channel.unary_unary(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig',
                request_serializer=xr__pb2.CliConfigArgs.SerializeToString,
                response_deserializer=xr__pb2.CliConfigReply.FromString,
                )
        self.CommitReplace = channel.unary_unary(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace',
                request_serializer=xr__pb2.CommitReplaceArgs.SerializeToString,
                response_deserializer=xr__pb2.CommitReplaceReply.FromString,
                )
        self.CommitConfig = channel.unary_unary(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig',
                request_serializer=xr__pb2.CommitArgs.SerializeToString,
                response_deserializer=xr__pb2.CommitReply.FromString,
                )
        self.ConfigDiscardChanges = channel.unary_unary(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges',
                request_serializer=xr__pb2.DiscardChangesArgs.SerializeToString,
                response_deserializer=xr__pb2.DiscardChangesReply.FromString,
                )
        self.GetOper = channel.unary_stream(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetOper',
                request_serializer=xr__pb2.GetOperArgs.SerializeToString,
                response_deserializer=xr__pb2.GetOperReply.FromString,
                )
        self.CreateSubs = channel.unary_stream(
                '/IOSXRExtensibleManagabilityService.gRPCConfigOper/CreateSubs',
                request_serializer=xr__pb2.CreateSubsArgs.SerializeToString,
                response_deserializer=xr__pb2.CreateSubsReply.FromString,
                )


class gRPCConfigOperServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConfig(self, request, context):
        """Configuration related commands

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MergeConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplaceConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CliConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitReplace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitConfig(self, request, context):
        """Do we need implicit or explicit commit

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigDiscardChanges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOper(self, request, context):
        """Get only returns oper data

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSubs(self, request, context):
        """Get Telemetry Data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_gRPCConfigOperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfig': grpc.unary_stream_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=xr__pb2.ConfigGetArgs.FromString,
                    response_serializer=xr__pb2.ConfigGetReply.SerializeToString,
            ),
            'MergeConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.MergeConfig,
                    request_deserializer=xr__pb2.ConfigArgs.FromString,
                    response_serializer=xr__pb2.ConfigReply.SerializeToString,
            ),
            'DeleteConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteConfig,
                    request_deserializer=xr__pb2.ConfigArgs.FromString,
                    response_serializer=xr__pb2.ConfigReply.SerializeToString,
            ),
            'ReplaceConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplaceConfig,
                    request_deserializer=xr__pb2.ConfigArgs.FromString,
                    response_serializer=xr__pb2.ConfigReply.SerializeToString,
            ),
            'CliConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.CliConfig,
                    request_deserializer=xr__pb2.CliConfigArgs.FromString,
                    response_serializer=xr__pb2.CliConfigReply.SerializeToString,
            ),
            'CommitReplace': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitReplace,
                    request_deserializer=xr__pb2.CommitReplaceArgs.FromString,
                    response_serializer=xr__pb2.CommitReplaceReply.SerializeToString,
            ),
            'CommitConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitConfig,
                    request_deserializer=xr__pb2.CommitArgs.FromString,
                    response_serializer=xr__pb2.CommitReply.SerializeToString,
            ),
            'ConfigDiscardChanges': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigDiscardChanges,
                    request_deserializer=xr__pb2.DiscardChangesArgs.FromString,
                    response_serializer=xr__pb2.DiscardChangesReply.SerializeToString,
            ),
            'GetOper': grpc.unary_stream_rpc_method_handler(
                    servicer.GetOper,
                    request_deserializer=xr__pb2.GetOperArgs.FromString,
                    response_serializer=xr__pb2.GetOperReply.SerializeToString,
            ),
            'CreateSubs': grpc.unary_stream_rpc_method_handler(
                    servicer.CreateSubs,
                    request_deserializer=xr__pb2.CreateSubsArgs.FromString,
                    response_serializer=xr__pb2.CreateSubsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'IOSXRExtensibleManagabilityService.gRPCConfigOper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class gRPCConfigOper(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetConfig',
            xr__pb2.ConfigGetArgs.SerializeToString,
            xr__pb2.ConfigGetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MergeConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig',
            xr__pb2.ConfigArgs.SerializeToString,
            xr__pb2.ConfigReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig',
            xr__pb2.ConfigArgs.SerializeToString,
            xr__pb2.ConfigReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplaceConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig',
            xr__pb2.ConfigArgs.SerializeToString,
            xr__pb2.ConfigReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CliConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig',
            xr__pb2.CliConfigArgs.SerializeToString,
            xr__pb2.CliConfigReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitReplace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace',
            xr__pb2.CommitReplaceArgs.SerializeToString,
            xr__pb2.CommitReplaceReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig',
            xr__pb2.CommitArgs.SerializeToString,
            xr__pb2.CommitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigDiscardChanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges',
            xr__pb2.DiscardChangesArgs.SerializeToString,
            xr__pb2.DiscardChangesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetOper',
            xr__pb2.GetOperArgs.SerializeToString,
            xr__pb2.GetOperReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSubs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/IOSXRExtensibleManagabilityService.gRPCConfigOper/CreateSubs',
            xr__pb2.CreateSubsArgs.SerializeToString,
            xr__pb2.CreateSubsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class gRPCExecStub(object):
    """
    Should we seperate Exec from Config/Oper?


    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ShowCmdTextOutput = channel.unary_stream(
                '/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdTextOutput',
                request_serializer=xr__pb2.ShowCmdArgs.SerializeToString,
                response_deserializer=xr__pb2.ShowCmdTextReply.FromString,
                )
        self.ShowCmdJSONOutput = channel.unary_stream(
                '/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdJSONOutput',
                request_serializer=xr__pb2.ShowCmdArgs.SerializeToString,
                response_deserializer=xr__pb2.ShowCmdJSONReply.FromString,
                )
        self.ActionJSON = channel.unary_stream(
                '/IOSXRExtensibleManagabilityService.gRPCExec/ActionJSON',
                request_serializer=xr__pb2.ActionJSONArgs.SerializeToString,
                response_deserializer=xr__pb2.ActionJSONReply.FromString,
                )


class gRPCExecServicer(object):
    """
    Should we seperate Exec from Config/Oper?


    """

    def ShowCmdTextOutput(self, request, context):
        """Exec commands
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowCmdJSONOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActionJSON(self, request, context):
        """rpc ActionCLI(ActionCliArgs) returns(stream ActionCliReply) {};
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_gRPCExecServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ShowCmdTextOutput': grpc.unary_stream_rpc_method_handler(
                    servicer.ShowCmdTextOutput,
                    request_deserializer=xr__pb2.ShowCmdArgs.FromString,
                    response_serializer=xr__pb2.ShowCmdTextReply.SerializeToString,
            ),
            'ShowCmdJSONOutput': grpc.unary_stream_rpc_method_handler(
                    servicer.ShowCmdJSONOutput,
                    request_deserializer=xr__pb2.ShowCmdArgs.FromString,
                    response_serializer=xr__pb2.ShowCmdJSONReply.SerializeToString,
            ),
            'ActionJSON': grpc.unary_stream_rpc_method_handler(
                    servicer.ActionJSON,
                    request_deserializer=xr__pb2.ActionJSONArgs.FromString,
                    response_serializer=xr__pb2.ActionJSONReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'IOSXRExtensibleManagabilityService.gRPCExec', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class gRPCExec(object):
    """
    Should we seperate Exec from Config/Oper?


    """

    @staticmethod
    def ShowCmdTextOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdTextOutput',
            xr__pb2.ShowCmdArgs.SerializeToString,
            xr__pb2.ShowCmdTextReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowCmdJSONOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdJSONOutput',
            xr__pb2.ShowCmdArgs.SerializeToString,
            xr__pb2.ShowCmdJSONReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActionJSON(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/IOSXRExtensibleManagabilityService.gRPCExec/ActionJSON',
            xr__pb2.ActionJSONArgs.SerializeToString,
            xr__pb2.ActionJSONReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
